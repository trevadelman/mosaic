{
  "agent": {
    "name": "weather_agent",
    "type": "Specialized",
    "description": "Agent for retrieving weather information for locations around the world",
    "capabilities": [
      "Current Weather",
      "Weather Forecasts",
      "Location Search"
    ],
    "icon": "🌤️",
    "tools": [
      {
        "name": "get_current_weather",
        "description": "Get the current weather for a specific location",
        "parameters": [
          {
            "name": "location",
            "type": "string",
            "description": "The location to get weather for (city name, zip code, etc.)"
          },
          {
            "name": "units",
            "type": "string",
            "description": "Temperature units (metric, imperial, standard)",
            "default": "metric",
            "required": false
          }
        ],
        "returns": {
          "type": "object",
          "description": "Current weather information including temperature, conditions, humidity, and wind"
        },
        "implementation": {
          "code": "import requests\nimport logging\n\nlogger = logging.getLogger(\"mosaic.agents.weather_agent\")\n\n@tool\ndef get_current_weather(location: str, units: str = \"metric\") -> str:\n    \"\"\"Get the current weather for a specific location.\n    \n    Args:\n        location: The location to get weather for (city name, zip code, etc.)\n        units: Temperature units (metric, imperial, standard)\n        \n    Returns:\n        Current weather information including temperature, conditions, humidity, and wind\n    \"\"\"\n    logger.info(f\"Getting current weather for {location} in {units} units\")\n    \n    try:\n        # Use OpenWeatherMap API (requires API key)\n        api_key = os.getenv(\"OPENWEATHER_API_KEY\")\n        if not api_key:\n            return \"Error: OpenWeatherMap API key not set. Please set the OPENWEATHER_API_KEY environment variable.\"\n        \n        url = f\"https://api.openweathermap.org/data/2.5/weather\"\n        params = {\n            \"q\": location,\n            \"units\": units,\n            \"appid\": api_key\n        }\n        \n        response = requests.get(url, params=params)\n        response.raise_for_status()\n        data = response.json()\n        \n        # Extract relevant information\n        weather_info = {\n            \"location\": f\"{data['name']}, {data.get('sys', {}).get('country', '')}\",\n            \"temperature\": data['main']['temp'],\n            \"feels_like\": data['main']['feels_like'],\n            \"conditions\": data['weather'][0]['description'],\n            \"humidity\": data['main']['humidity'],\n            \"wind_speed\": data['wind']['speed'],\n            \"wind_direction\": data['wind']['deg']\n        }\n        \n        # Format the response\n        unit_symbol = \"°C\" if units == \"metric\" else \"°F\" if units == \"imperial\" else \"K\"\n        formatted_response = f\"Current weather for {weather_info['location']}:\\n\"\n        formatted_response += f\"Temperature: {weather_info['temperature']}{unit_symbol} (feels like {weather_info['feels_like']}{unit_symbol})\\n\"\n        formatted_response += f\"Conditions: {weather_info['conditions']}\\n\"\n        formatted_response += f\"Humidity: {weather_info['humidity']}%\\n\"\n        formatted_response += f\"Wind: {weather_info['wind_speed']} m/s at {weather_info['wind_direction']}°\"\n        \n        logger.info(f\"Successfully retrieved weather for {location}\")\n        return formatted_response\n    \n    except Exception as e:\n        logger.error(f\"Error getting weather for {location}: {str(e)}\")\n        return f\"Error retrieving weather information: {str(e)}\"\n",
          "dependencies": [
            "requests"
          ]
        }
      },
      {
        "name": "get_weather_forecast",
        "description": "Get a weather forecast for a specific location",
        "parameters": [
          {
            "name": "location",
            "type": "string",
            "description": "The location to get the forecast for (city name, zip code, etc.)"
          },
          {
            "name": "days",
            "type": "integer",
            "description": "Number of days to forecast (1-5)",
            "default": 3,
            "required": false
          },
          {
            "name": "units",
            "type": "string",
            "description": "Temperature units (metric, imperial, standard)",
            "default": "metric",
            "required": false
          }
        ],
        "returns": {
          "type": "string",
          "description": "Weather forecast for the specified number of days"
        },
        "implementation": {
          "code": "import requests\nimport logging\nfrom datetime import datetime\n\nlogger = logging.getLogger(\"mosaic.agents.weather_agent\")\n\n@tool\ndef get_weather_forecast(location: str, days: int = 3, units: str = \"metric\") -> str:\n    \"\"\"Get a weather forecast for a specific location.\n    \n    Args:\n        location: The location to get the forecast for (city name, zip code, etc.)\n        days: Number of days to forecast (1-5)\n        units: Temperature units (metric, imperial, standard)\n        \n    Returns:\n        Weather forecast for the specified number of days\n    \"\"\"\n    logger.info(f\"Getting {days}-day forecast for {location} in {units} units\")\n    \n    # Validate days parameter\n    days = max(1, min(5, days))  # Ensure days is between 1 and 5\n    \n    try:\n        # Use OpenWeatherMap API (requires API key)\n        api_key = os.getenv(\"OPENWEATHER_API_KEY\")\n        if not api_key:\n            return \"Error: OpenWeatherMap API key not set. Please set the OPENWEATHER_API_KEY environment variable.\"\n        \n        url = f\"https://api.openweathermap.org/data/2.5/forecast\"\n        params = {\n            \"q\": location,\n            \"units\": units,\n            \"appid\": api_key\n        }\n        \n        response = requests.get(url, params=params)\n        response.raise_for_status()\n        data = response.json()\n        \n        # Extract forecast data\n        forecasts = {}\n        for item in data['list']:\n            # Convert timestamp to date\n            dt = datetime.fromtimestamp(item['dt'])\n            date_str = dt.strftime(\"%Y-%m-%d\")\n            \n            # Group forecasts by date\n            if date_str not in forecasts:\n                if len(forecasts) >= days:\n                    continue  # Skip if we already have enough days\n                forecasts[date_str] = []\n            \n            forecasts[date_str].append({\n                \"time\": dt.strftime(\"%H:%M\"),\n                \"temp\": item['main']['temp'],\n                \"conditions\": item['weather'][0]['description'],\n                \"humidity\": item['main']['humidity'],\n                \"wind_speed\": item['wind']['speed']\n            })\n        \n        # Format the response\n        unit_symbol = \"°C\" if units == \"metric\" else \"°F\" if units == \"imperial\" else \"K\"\n        formatted_response = f\"Weather forecast for {data['city']['name']}, {data['city']['country']}:\\n\\n\"\n        \n        for date, items in forecasts.items():\n            # Calculate daily averages\n            avg_temp = sum(item['temp'] for item in items) / len(items)\n            conditions = max(set(item['conditions'] for item in items), key=[item['conditions'] for item in items].count)\n            \n            formatted_response += f\"Date: {date}\\n\"\n            formatted_response += f\"Average Temperature: {avg_temp:.1f}{unit_symbol}\\n\"\n            formatted_response += f\"Conditions: {conditions}\\n\"\n            formatted_response += \"Hourly: \"\n            for item in items[:3]:  # Show first 3 hours only to keep it concise\n                formatted_response += f\"{item['time']}: {item['temp']}{unit_symbol}, \"\n            formatted_response += \"...\\n\\n\"\n        \n        logger.info(f\"Successfully retrieved forecast for {location}\")\n        return formatted_response\n    \n    except Exception as e:\n        logger.error(f\"Error getting forecast for {location}: {str(e)}\")\n        return f\"Error retrieving forecast information: {str(e)}\"\n",
          "dependencies": [
            "requests"
          ]
        }
      }
    ],
    "systemPrompt": "You are a weather information specialist with access to current weather data and forecasts for locations around the world. Your job is to provide accurate and helpful weather information to users.\n\nYou have the following tools at your disposal:\n- Use get_current_weather to retrieve current weather conditions for a specific location.\n- Use get_weather_forecast to get a multi-day forecast for a specific location.\n\nWhen users ask about weather, always try to identify the specific location they're asking about. If they don't specify a location, ask them to provide one. If they don't specify units (metric or imperial), default to metric (Celsius).\n\nAlways provide factual information based on the data from your tools. If you cannot retrieve weather information for a location, clearly explain why and suggest alternatives (e.g., checking spelling, using a larger nearby city).\n\nNever make up weather information or hallucinate details.",
    "metadata": {
      "version": "1.0.0",
      "author": "MOSAIC Team",
      "created": "2025-03-03T19:41:00Z",
      "tags": [
        "weather",
        "forecast",
        "utility"
      ]
    }
  }
}
