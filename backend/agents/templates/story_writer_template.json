{
  "agent": {
    "name": "story_writer",
    "type": "Utility",
    "description": "A creative agent that can generate short stories based on prompts",
    "capabilities": ["Story Generation", "Creative Writing", "Character Development"],
    "icon": "📝",
    "systemPrompt": "You are a creative short story writer. You can generate engaging stories based on prompts, themes, or characters provided by the user. Your stories should be well-structured with a beginning, middle, and end, and include vivid descriptions and compelling characters.",
    "tools": [
      {
        "name": "generate_story",
        "description": "Generate a short story based on a prompt",
        "parameters": [
          {
            "name": "prompt",
            "type": "string",
            "description": "The prompt or theme for the story",
            "required": true
          },
          {
            "name": "length",
            "type": "string",
            "description": "The desired length of the story (short, medium, long)",
            "required": false
          },
          {
            "name": "genre",
            "type": "string",
            "description": "The genre of the story (e.g., fantasy, sci-fi, romance, mystery)",
            "required": false
          }
        ],
        "returns": {
          "type": "object",
          "description": "The generated story with title and content"
        },
        "implementation": {
          "code": "from langchain.tools import tool\n\n@tool\ndef generate_story(prompt: str, length: str = \"medium\", genre: str = \"general\") -> dict:\n    \"\"\"Generate a short story based on a prompt, length, and genre.\"\"\"\n    # This function would typically call an LLM to generate the story\n    # For now, we'll return a placeholder that explains what would happen\n    \n    # Determine word count based on length\n    word_counts = {\n        \"short\": \"approximately 500 words\",\n        \"medium\": \"approximately 1000 words\",\n        \"long\": \"approximately 2000 words\"\n    }\n    \n    word_count = word_counts.get(length.lower(), \"a variable length\")\n    \n    return {\n        \"title\": f\"A {genre.title()} Story Based on '{prompt}'\",\n        \"content\": f\"This would be a {word_count} story in the {genre} genre, based on the prompt: {prompt}. The story would have a clear beginning, middle, and end, with well-developed characters and engaging dialogue.\",\n        \"metadata\": {\n            \"prompt\": prompt,\n            \"length\": length,\n            \"genre\": genre,\n            \"word_count\": word_count\n        }\n    }"
        }
      },
      {
        "name": "develop_character",
        "description": "Develop a character profile for a story",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The character's name",
            "required": true
          },
          {
            "name": "traits",
            "type": "string",
            "description": "Comma-separated list of character traits",
            "required": false
          },
          {
            "name": "background",
            "type": "string",
            "description": "Brief background information about the character",
            "required": false
          }
        ],
        "returns": {
          "type": "object",
          "description": "A detailed character profile"
        },
        "implementation": {
          "code": "from langchain.tools import tool\n\n@tool\ndef develop_character(name: str, traits: str = \"\", background: str = \"\") -> dict:\n    \"\"\"Develop a detailed character profile for a story.\"\"\"\n    # This function would typically call an LLM to generate the character profile\n    # For now, we'll return a placeholder that explains what would happen\n    \n    traits_list = [trait.strip() for trait in traits.split(\",\") if trait.strip()] if traits else [\"determined\", \"resourceful\"]\n    \n    return {\n        \"name\": name,\n        \"traits\": traits_list,\n        \"background\": background or \"A mysterious past that shapes their current motivations and actions.\",\n        \"profile\": f\"This would be a detailed profile for {name}, a character with traits such as {', '.join(traits_list)}. Their background would include: {background or 'A mysterious past that shapes their current motivations and actions.'}\\n\\nThe profile would include details about their appearance, personality, motivations, fears, desires, and how they might evolve throughout a story.\"\n    }"
        }
      },
      {
        "name": "create_story_outline",
        "description": "Create an outline for a story with plot points",
        "parameters": [
          {
            "name": "title",
            "type": "string",
            "description": "The title of the story",
            "required": true
          },
          {
            "name": "premise",
            "type": "string",
            "description": "The main premise or concept of the story",
            "required": true
          },
          {
            "name": "num_acts",
            "type": "integer",
            "description": "Number of acts in the story (typically 3 or 5)",
            "required": false
          }
        ],
        "returns": {
          "type": "object",
          "description": "A structured outline for the story"
        },
        "implementation": {
          "code": "from langchain.tools import tool\n\n@tool\ndef create_story_outline(title: str, premise: str, num_acts: int = 3) -> dict:\n    \"\"\"Create a structured outline for a story with the specified number of acts.\"\"\"\n    # This function would typically call an LLM to generate the outline\n    # For now, we'll return a placeholder that explains what would happen\n    \n    acts = []\n    \n    if num_acts == 3:\n        acts = [\n            {\n                \"name\": \"Act 1: Setup\",\n                \"description\": \"Introduction of the main characters, setting, and the inciting incident that sets the story in motion.\"\n            },\n            {\n                \"name\": \"Act 2: Confrontation\",\n                \"description\": \"The main characters face obstacles and conflicts as they pursue their goals. The stakes increase and challenges become more difficult.\"\n            },\n            {\n                \"name\": \"Act 3: Resolution\",\n                \"description\": \"The climax of the story where the main conflict comes to a head, followed by the resolution and denouement.\"\n            }\n        ]\n    elif num_acts == 5:\n        acts = [\n            {\n                \"name\": \"Act 1: Exposition\",\n                \"description\": \"Introduction of the main characters, setting, and the normal world.\"\n            },\n            {\n                \"name\": \"Act 2: Rising Action\",\n                \"description\": \"The inciting incident occurs and the main characters begin their journey.\"\n            },\n            {\n                \"name\": \"Act 3: Complication\",\n                \"description\": \"Obstacles and conflicts intensify, raising the stakes for the main characters.\"\n            },\n            {\n                \"name\": \"Act 4: Climax\",\n                \"description\": \"The main conflict comes to a head, and the main characters face their greatest challenge.\"\n            },\n            {\n                \"name\": \"Act 5: Resolution\",\n                \"description\": \"The aftermath of the climax, where loose ends are tied up and the new normal is established.\"\n            }\n        ]\n    else:\n        acts = [{\n            \"name\": f\"Act {i+1}\",\n            \"description\": f\"This would be act {i+1} of the story.\"\n        } for i in range(num_acts)]\n    \n    return {\n        \"title\": title,\n        \"premise\": premise,\n        \"num_acts\": num_acts,\n        \"acts\": acts,\n        \"notes\": f\"This outline would provide a structured framework for a story titled '{title}' based on the premise: {premise}. It would include {num_acts} acts with key plot points, character development moments, and thematic elements.\"\n    }"
        }
      }
    ]
  }
}
